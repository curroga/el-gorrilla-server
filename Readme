TÍTULO : IRON FASHION

URL:  https://modern-kit-seal.cyclic.app/api

Descripción: 
He creado esta App para evitar la tediosa tarea de buscar aparcamientos en una zona concurrida de una ciudad.
La ida principal es evitar el malestar que produce tener que salir antes de casa, oficina, etc, dar mil vueltas por el mismo lugar, etc.

PROGRAMACIÓN:

1 - PREARAR ESQUEMA DE LA PÁGINA MEDIANTE LA PÁGINA WEB MIRÓ
2- CREAR ARBOL CON TODAS LAS CARPETAS Y ARCHIVOS. REQUERIMIENTO DE PAQUETES NPM
3- CREACIÓN DE MODELOS
    - Definir las relaciones entre modelos
4- RUTAS DE AUTHENTICACIÓN
5- RUTAS CRUD
6- Creacion de un Token como elemento de seguridad

  * Rutas:
     - Calles
        Ruta GET "/api/calle",  enviar al FE la informaion de todas las calles 
        Ruta GET "/api//calle/favoritos", enviar al FE la informacion de mis calles favoritas
        Ruta POST "/api/calle", recibe detalles de una calle y lo crea en la Base de Datos
        Ruta GET "/api/calle/:calleId", enviar todos los detalles de una calle por su Id
        Ruta DELETE "/api/calle/:calleId", borrar un documento de Calle de la BD por su Id
        Ruta PATCH "/api/calle/:calleId", editar un documento de Calle de la BD por su Id
        Ruta PATCH "/api/calle/favoritos/:calleId", añadir una Calle a favoritos
        Ruta PATCH "/api/calle/favoritos-delete/:calleId", borrar una Calle de favoritos
        Ruta PATCH "/api/calle/:calleId/:cocheId", ruta para añadir un Coche a la Calle y que recibe dos params dinamicos, uno va a ser la Id de la Calle a la que queremos agregar el Coche y el otro va a ser el Id del Coche que queremos agregar
        Ruta PATCH "/api/calle/:calleId/:cocheId", ruta para quitar un Coche de la Calle
           
     - Auth:
        Ruta POST, "/api/auth/signup", recibe detalles de un usuario y los crea en la BD 
        Ruta POST, "/api/auth/login", recibe detalles de un usuario y los crea en la BD 
        Ruta GET, "/api/auth/verify", ruta para verificar que el usuario ya ha sido validado
       
     - Coches
        Ruta GET, "/api/car", enviar al FE la informacion de todos los coches
        Ruta POST "/api/car", recibe detalles de un nuevo coche y lo crea en la BD
        Ruta GET "/api/:carId", enviar todos los detalles de un coche por su Id
        Ruta DELETE "/api/car/:carId", borrar un documento de Coche de la BD por su Id
        Ruta Patch "/api/car/:carId", editar un documento de Coche de la Bd por su Id

  * Modelos:
    - Calles:
      - name, de tipo String
      - numAparacamientos, de tipo Number
      - numOcupados, objeto de tipo Number con un valor por defecto de 0        
      - numLibres, objeto de tipo Number con un valor por defecto de 0 
      - coches, un array de objetos, que hace referencia al modelo Cars
      - positionMarker, un array de objetos de tipo Number

    - Cars:
      - modelo, de tipo String
      - matricula, de tipo String
      - color, de tipo String
      - owner, objeto que hace referencia al modelo User
      - timestamps

      - username, de tipo String
      - email, de tipo String
      - password, de tipo String
      - role, de tipo String que pueden ser de dos tipos user o admin y por defecta le añadimos user
      - favoritos un array de objetos que hace referencia al modelo Calles

  * Middlewares:
    - isAuthenticated, donde autenticamos el token 
    - isAdmin, verificamos que la persona logeada es un admin



     
     